version: 2.1

jobs:
  build-dev:
    docker:
    - image: finalgene/composer:latest
    working_directory: /tmp/project
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-composer-{{ checksum "composer.lock" }}-dev
    - run:
        name: Install composer dependencies
        command: composer install --no-interaction --optimize-autoloader --prefer-dist
    - save_cache:
        paths:
        - vendor
        key: v1-composer-{{ checksum "composer.lock" }}-dev
    - run:
        name: Install build tools
        command: |
          composer run-script install-phpunit
          composer run-script install-codacy-coverage
    - persist_to_workspace:
        root: /tmp/project
        paths:
        - vendor

  build-no-dev:
    docker:
    - image: finalgene/composer:latest
    working_directory: /tmp/project
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-composer-{{ checksum "composer.lock" }}-no-dev
    - run:
        name: Install composer dependencies
        command: composer install --no-dev --no-interaction --optimize-autoloader --prefer-dist
    - save_cache:
        paths:
        - vendor
        key: v1-composer-{{ checksum "composer.lock" }}-no-dev
    - persist_to_workspace:
        root: /tmp/project
        paths:
        - vendor

  security-check:
    docker:
    - image: jsixc/sensiolabs-security-checker
    working_directory: /tmp/project
    steps:
    - checkout
    - run:
        name: Execute code style checks
        command: security-checker security:check

  code-style-check:
    docker:
    - image: finalgene/phpcs:latest
    working_directory: /tmp/project
    steps:
    - checkout
    - run:
        name: Execute code style checks
        command: phpcs -p

  unit-tests:
    docker:
    - image: finalgene/php-cli:7.2
    working_directory: /tmp/project
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/project
    - run:
        name: Execute unit tests
        command: php -dzend_extension=xdebug.so vendor/bin/phpunit --coverage-text --coverage-clover=.build/logs/coverage.clover.xml --log-junit=.build/test-results/phpunit/results.xml
        environment:
    - run:
        name: Upload coverage data
        command: vendor/bin/codacy-coverage clover .build/logs/coverage.clover.xml
    - store_test_results:
        path: .build/test-results

  build-phar:
    docker:
    - image: finalgene/box-builder:2.7
    working_directory: /tmp/project
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/project
    - run:
        name: Build phar
        command: |
          mkdir -p .build
          box build -v
    - persist_to_workspace:
        root: /tmp/project
        paths:
        - .build

  deploy-phar:
    docker:
    - image: circleci/golang:1.9.6
    working_directory: /tmp/project
    steps:
    - checkout
    - run:
        name: Download github-release
        command: go get github.com/aktau/github-release
    - attach_workspace:
        at: /tmp/project
    - run:
        name: Set github username
        command: git config user.name ${CIRCLE_PROJECT_USERNAME}
    - run:
        name: Deploy phar
        command: github-release upload --user ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --tag ${CIRCLE_TAG} --name phonebook.phar --file .build/phonebook.phar

  deploy-docker:
    docker:
    - image: byrnedo/alpine-curl:latest
    working_directory: /tmp/project
    steps:
    - run:
        name: Trigger build
        command: |
          apk add curl
          curl -H "Content-Type: application/json" --data "{\"source_type\": \"Tag\", \"source_name\": \"${CIRCLE_TAG}\"}" -X POST https://registry.hub.docker.com/u/finalgene/phonebook/trigger/${DOCKER_HUB_TOKEN}/
          curl -H "Content-Type: application/json" --data "{\"docker_tag\": \"latest\"}" -X POST https://registry.hub.docker.com/u/finalgene/phonebook/trigger/${DOCKER_HUB_TOKEN}/

workflows:
  version: 2
  test:
    jobs:
    - build-dev:
        filters:
          tags:
            ignore: /.*/

    - security-check:
        requires:
        - build-dev

    - code-style-check:
        requires:
        - build-dev

    - unit-tests:
        requires:
        - build-dev

  build-n-deploy:
    jobs:
    - build-no-dev:
        filters:
          tags:
            only: /[0-9]+(\.[0-9]+)*/
          branches:
            ignore: /.*/

    - build-phar:
        requires:
        - build-no-dev
        filters:
          tags:
            only: /[0-9]+(\.[0-9]+)*/

    - deploy-phar:
        requires:
        - build-phar
        filters:
          tags:
            only: /[0-9]+(\.[0-9]+)*/

    - deploy-docker:
        requires:
        - deploy-phar
        filters:
          tags:
            only: /[0-9]+(\.[0-9]+)*/
